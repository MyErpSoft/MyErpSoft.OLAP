/*
 * https://msdn.microsoft.com/zh-cn/library/ms174760(v=sql.110).aspx
属性和属性层次结构
维度是属性的集合，这些属性绑定到数据源视图的表或视图中的一列或多列。

键属性
每个维度都包含一个键属性。 每个属性都绑定到维度表中的一列或多列。 
键属性是维度中标识维度主表中各列（在与事实数据表的外键关系中使用）的属性。 通常，键属性表示维度表中的一个或多个主键列。 您可以对在基础数据源内没有物理主键的数据源视图中的某个表定义逻辑主键。 
当定义键属性时，多维数据集向导和维度向导会尝试使用数据源视图中维度表的主键列。 如果维度表未定义逻辑主键或物理主键，则上述向导可能无法正确地为维度定义键属性。

将属性绑定到数据源视图表或视图中的列
属性将绑定到一个或多个数据源视图表或视图中的列。 属性始终绑定到一个或多个键列上，这些键列将确定属性包含的成员。 默认情况下，这是唯一绑定有属性的列。 
还可以针对特定的目的将属性绑定到一个或多个其他列。 例如，特性的 NameColumn 属性将确定每个特性成员向用户显示的名称 - 可以通过数据源视图将该特性的这个属性绑定到特定的维度列，也可以将该属性绑定到数据源视图中的计算列。 

属性层次结构
默认情况下，会将属性成员组织到两个级别的层次结构中，其中包含一个叶级别和一个“全部”级别。 “全部”级别包含每个与属性相关的度量值组（其维度是一个成员）中所有度量值的属性成员的聚合值。 
但是，如果将 IsAggregatable 属性设置为 False，则无法创建“全部”级别。 有关详细信息，请参阅维度特性属性参考。
可以并且通常将属性排列到用户定义的层次结构中，通过这些层次结构提供的下钻路径，用户可以浏览与属性相关的度量值组中的数据。 
在客户端应用程序中，属性可用于提供分组和约束信息。 将属性排列到用户定义的层次结构时，如果在多对一或者一对一关系（称为“自然”关系）中各级别相关，则可以定义层次结构级别之间的关系。 
例如，在“日历时间”层次结构中，“日”级别应与“月”级别相关，“月”级别应与“季度”级别相关等等。 
通过定义用户定义层次结构中级别之间的关系，Analysis Services 可以定义更有用的聚合来提高查询性能，并且还可以在处理性能过程中节省内存，这对于大型或复杂多维数据集非常重要。 

属性关系、星型架构和雪花型架构
默认情况下，在星型架构中，所有属性都直接与键属性相关，这使得用户可根据维度中的任意属性层次结构浏览多维数据集中的事实数据。 
在雪花型架构中，如果属性的基础表直接链接到事实数据表，则属性会直接链接到键属性；另外，属性还可以使用绑定到基础表（将雪花状表链接到直接链接的表）中键的属性间接地进行链接。

 * https://msdn.microsoft.com/zh-cn/library/ms174557(v=sql.110).aspx
自然层次结构关系
当用户定义层次结构中包含的每个属性都与其下直接属性具有一对多关系时，层次结构就是自然层次结构。 例如，请参考基于具有八列的关系源表的“客户”维度：
    * CustomerKey
    * CustomerName
    * 年龄
    * 性别
    * 电子邮件
    * City
    * 国家(地区)
    * 区域
相应的 Analysis Services 维度具有七个属性：
    * 客户（基于 CustomerKey，其中 CustomerName 提供成员名称）
    * 年龄、性别、电子邮件、市县、地区、国家(地区)
通过在某级别的属性和此级别下面的级别的属性之间创建属性关系，强制执行表示自然层次结构的关系。 对于 Analysis Services，这可指定自然关系和潜在聚合。 
在“客户”维度中，“国家(地区)”、“区域”、“市县”和“客户”属性具有自然层次结构。 通过添加下列属性关系来说明 {Country, Region, City, Customer} 的自然层次结构：
    * 与“区域”属性具有属性关系的“国家(地区)”属性。
    * 与“市县”属性具有属性关系的“区域”属性。
    * 与“客户”属性具有属性关系的“市县”属性。
为了导航多维数据集中的数据，您还可以在数据中创建并不表示自然层次结构的用户定义层次结构（称为“即席”或“报表”层次结构）。 例如，您可以基于 {Age, Gender} 创建用户定义层次结构。 
尽管自然层次结构是在聚合结构和索引结构（这两种结构对源数据中的自然关系进行了解释，并且对用户隐藏）的基础上形成，但是用户无法看到两种层次结构的行为差异。
级别的 SourceAttribute 属性确定用于说明该级别的特性。 特性的 KeyColumns 属性指定数据源视图中提供成员的列。 特性的 NameColumn 属性可以指定成员的其他名称列。
若要通过 SQL Server Data Tools (SSDT) 定义用户定义层次结构中的级别，可以使用“维度设计器”来选择维度属性、维度表中的列或多维数据集数据源视图中包含的相关表中的列。 
在 Analysis Services 中，通常对成员的内容进行假定。 叶成员没有后代，并且包含派生自基础数据源的数据。 
非叶成员则具有后代，并且包含派生自对子成员执行的聚合的数据。 在聚合级别中，各成员基于其从属级别的聚合。 因此，当级别源特性的 IsAggregatable 属性设置为 False 时，不应添加可聚合的特性作为该级别上面的级别。

定义属性关系
创建属性关系时的主要约束是确保，对于属性关系引用的属性，属性关系所属的属性中的任何成员的值不超过一个。 例如，如果您在“市县”属性与“省市自治区”属性之间定义了关系，则每个市县只能与单个省市自治区相关。
 */
using System;

namespace MyErpSoft.OLAP.Metadata {

    /// <summary>
    /// 描述维度对象。
    /// </summary>
    public class Dimension
#if NOT_INCLUDED
        : IMetadataObject 
#endif
    {
        /// <summary>
        /// 返回此对象的本地化显示名称。
        /// </summary>
        public string Caption {
            get { throw new NotImplementedException(); }
        }

        /// <summary>
        /// 返回此对象的本地化描述性文本。
        /// </summary>
        public string Description {
            get { throw new NotImplementedException(); }
        }

#if NOT_INCLUDED
        /// <summary>
        /// 获取 立方体 的名称。
        /// </summary>
        public string Name {
            get {
                throw new NotImplementedException();
            }
        }

        /// <summary>
        /// 返回 立方体 的唯一识别名称。
        /// </summary>
        public string UniqueName {
            get {
                throw new NotImplementedException();
            }
        }
#endif
    }
}
